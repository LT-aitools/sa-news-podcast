name: Daily SA News Podcast

on:
  schedule:
    # Run every day at 6:00 AM UTC (8:00 AM SAST)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up secrets
      env:
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
        CLEANUP_SECRET_KEY: ${{ secrets.CLEANUP_SECRET_KEY }}
      run: |
        # Create the secrets directory
        mkdir -p ~/.config/sa-podcast
        
        # Create secrets.json file with GitHub Secrets using Python for proper JSON escaping
        python -c "
        import json
        import os
        
        secrets = {
            'perplexity_api_key': os.environ.get('PERPLEXITY_API_KEY', ''),
            'claude_api_key': os.environ.get('CLAUDE_API_KEY', ''),
            'openai_api_key': os.environ.get('OPENAI_API_KEY', ''),
            'azure_speech_key': os.environ.get('AZURE_SPEECH_KEY', ''),
            'azure_speech_region': os.environ.get('AZURE_SPEECH_REGION', ''),
            'cleanup': {
                'secret_key': os.environ.get('CLEANUP_SECRET_KEY', '')
            }
        }
        
        with open('~/.config/sa-podcast/secrets.json', 'w') as f:
            json.dump(secrets, f, indent=2)
        
        print('✅ Secrets file created successfully')
        "
        
        # Validate JSON format
        python -c "import json; json.load(open('~/.config/sa-podcast/secrets.json')); print('✅ JSON is valid')"
        
    - name: Generate AI-powered podcast
      run: |
        python podcast_creator.py --ai
        
    - name: Upload generated files
      uses: actions/upload-artifact@v4
      with:
        name: podcast-files-${{ github.run_number }}
        path: |
          outputs/
          public/*.mp3
        retention-days: 7
        
    - name: Deploy to GitHub Pages (if configured)
      if: success()
      run: |
        # This would deploy the podcast files to GitHub Pages
        # You'll need to configure GitHub Pages in your repository settings
        echo "Podcast generation completed successfully"
        echo "Files are ready for deployment"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Podcast generation failed"
        echo "Check the logs above for details"